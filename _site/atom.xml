<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Green  Light</title>
 <link href="http://xia0guang.github.io/" rel="self"/>
 <link href="http://xia0guang.github.io"/>
 <updated>2015-03-01T12:07:27-08:00</updated>
 <id>http://xia0guang.github.io</id>
 <author>
   <name>Ray Wu</name>
   <email>wu890120@gmail.com</email>
 </author>

 
 <entry>
   <title>Top Ten Shortcuts for intelliJ IDEA</title>
   <link href="http://xia0guang.github.io/productivity/2015/02/28/top-ten-intellij-idea-shortcuts"/>
   <updated>2015-02-28T00:00:00-08:00</updated>
   <id>http://xia0guang.github.io/productivity/2015/02/28/top-ten-intellij-idea-shortcuts</id>
   <content type="html">
&lt;p&gt;转载于&lt;a href=&quot;http://blog.csdn.net/dc_726/article/details/42784275&quot;&gt;十大Intellij IDEA快捷键&lt;/a&gt;  &lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;之前所有的使用软件的习惯都是想用什么区查什么, 然后顺便记住, 但是当我使用 intelliJ-IDEA 的过程中发现想要记住这玩意儿的快捷键真的是一项浩大的工程, 不亚于学会一门新的语言, 所以现在特地从网上找了一篇专门介绍快捷键的文章, 以便于参考, 以下便是摘录:  &lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;智能提示:&lt;br /&gt;
 &lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;Space&lt;/code&gt;: 基本的代码提示&lt;br /&gt;
 &lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;Space&lt;/code&gt;: 智能地按类型信息提示&lt;br /&gt;
     * 但因为Intellij总是随着我们敲击而自动提示，所以很多时候都不会手动敲这两个快捷键(除非提示框消失了)&lt;br /&gt;
 &lt;code&gt;F2&lt;/code&gt; / &lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;F2&lt;/code&gt;: 移动到有错误的代码&lt;br /&gt;
 &lt;code&gt;Alt&lt;/code&gt; + &lt;code&gt;Enter&lt;/code&gt;: 快速修复, 这个比 eclipse 方便, 很多时候都不需要按快捷键就已经自动添加了&lt;br /&gt;
 &lt;code&gt;Command&lt;/code&gt; + &lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;Enter&lt;/code&gt;: 当智能提示为我们自动补全方法名时，我们通常要自己补上行尾的反括号和分号，当括号嵌套很多层时会很麻烦，这时我们只需敲这组快捷键就能自动补全末尾的字符。而且不只是括号，例如敲完if/for时也可以自动补上{}花括号&lt;br /&gt;
     * 最后要说一点，Intellij能够智能感知Spring、Hibernate等主流框架的配置文件和类，以静制动，在看似“静态”的外表下，智能地扫描理解你的项目是如何构造和配置的  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;重构:  &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Intellij重构是另一完爆Eclipse的功能，其智能程度令人瞠目结舌，比如提取变量时自动检查到所有匹配同时提取成一个变量等  &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;推荐书目:《重构-改善既有代码设计》  &lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;code&gt;Command&lt;/code&gt; + &lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;Alt&lt;/code&gt; + &lt;code&gt;T&lt;/code&gt;: Refactor this, 大多数可以直接用这个, 如果一些功能太常用的话, 也可以直接记单独的快捷键, 比如:&lt;br /&gt;
  	* &lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;F6&lt;/code&gt;: Rename&lt;br /&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;code&gt;Command&lt;/code&gt; + &lt;code&gt;Alt&lt;/code&gt; + &lt;code&gt;V&lt;/code&gt;: 提取变量  &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;!--more--&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;代码生成:&lt;br /&gt;
 &lt;code&gt;fori&lt;/code&gt;/&lt;code&gt;sout&lt;/code&gt;/&lt;code&gt;psvm&lt;/code&gt; + &lt;code&gt;Tab&lt;/code&gt;: 可生成循环、System.out、main方法等boilerplate样板代码 
     * 另外，Intellij IDEA 13中加入了后缀自动补全功能(Postfix Completion)，比模板生成更加灵活和强大。例如要输入for(User user : users)只需输入user.for+Tab。再比如，要输入Date birthday = user.getBirthday();只需输入user.getBirthday().var+Tab即可   &lt;/p&gt;

    &lt;p&gt;&lt;code&gt;Command&lt;/code&gt; + &lt;code&gt;J&lt;/code&gt;: 查看所有模板&lt;br /&gt;
 &lt;code&gt;Command&lt;/code&gt; + &lt;code&gt;O&lt;/code&gt;: Override  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;编辑:&lt;br /&gt;
 &lt;code&gt;Command&lt;/code&gt; + &lt;code&gt;W&lt;/code&gt;/&lt;code&gt;Command&lt;/code&gt; + &lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;W&lt;/code&gt;: 自动按语法选中代码或反向选中&lt;br /&gt;
 &lt;code&gt;Command&lt;/code&gt; + &lt;code&gt;Y&lt;/code&gt;: 删除行&lt;br /&gt;
 &lt;code&gt;Command&lt;/code&gt; + &lt;code&gt;D&lt;/code&gt;: 复制行&lt;br /&gt;
 &lt;code&gt;Command&lt;/code&gt; + &lt;code&gt;&amp;lt;&lt;/code&gt;/&lt;code&gt;&amp;gt;&lt;/code&gt;: 折叠代码  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;查找打开:&lt;br /&gt;
 &lt;code&gt;Command&lt;/code&gt; + &lt;code&gt;O&lt;/code&gt;/&lt;code&gt;Command&lt;/code&gt; + &lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;O&lt;/code&gt;: 类似Eclipse, 可以打开类或资源, 但Intellij更加智能一些，我们输入的任何字符都将看作模糊匹配，省却了Eclipse中还有输入*的麻烦。最新版本的IDEA还加入了Search Everywhere功能，只需按Shift+Shift即可在一个弹出框中搜索任何东西，包括类、资源、配置项、方法等等&lt;br /&gt;
 &lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;H&lt;/code&gt;: 打开类层次窗口&lt;br /&gt;
 &lt;code&gt;Command&lt;/code&gt; + &lt;code&gt;B&lt;/code&gt;/&lt;code&gt;Command&lt;/code&gt; + &lt;code&gt;Alt&lt;/code&gt; + &lt;code&gt;B&lt;/code&gt;: 分别对应父类或父方法declaration和子类或子方法implementation  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;其他辅助:&lt;br /&gt;
 &lt;code&gt;Command&lt;/code&gt; + &lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;A&lt;/code&gt;: 可以查找所有Intellij的命令，并且每个命令后面还有其快捷键。所以它不仅是一大神键，也是查找学习快捷键的工具&lt;br /&gt;
 &lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;Alt&lt;/code&gt; + &lt;code&gt;O&lt;/code&gt;: 格式化 import 列表&lt;br /&gt;
 &lt;code&gt;Command&lt;/code&gt; + &lt;code&gt;Alt&lt;/code&gt; + &lt;code&gt;L&lt;/code&gt;: 格式化代码&lt;br /&gt;
 &lt;code&gt;Command&lt;/code&gt; + &lt;code&gt;F4&lt;/code&gt;: 关闭当前标签&lt;br /&gt;
 &lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;F10&lt;/code&gt;/&lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;Alt&lt;/code&gt; + &lt;code&gt;F10&lt;/code&gt;: 运行当前程序/选择程序运行&lt;br /&gt;
 &lt;code&gt;F7&lt;/code&gt;,&lt;code&gt;F8&lt;/code&gt;,&lt;code&gt;F9&lt;/code&gt;: 分别对应 Step into，Step over，Continue  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;最终榜单:  &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Top #10切来切去：&lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;Tab&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Top #9选你所想：&lt;code&gt;Command&lt;/code&gt;+&lt;code&gt;W&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Top #8代码生成：&lt;code&gt;Template/Postfix&lt;/code&gt; +&lt;code&gt;Tab&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Top #7发号施令：&lt;code&gt;Command&lt;/code&gt;+&lt;code&gt;Shift&lt;/code&gt;+&lt;code&gt;A&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Top #6无处藏身(search in every where)：&lt;code&gt;Shift&lt;/code&gt;+&lt;code&gt;Shift&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Top #5自动完成：&lt;code&gt;Command&lt;/code&gt;+&lt;code&gt;Shift&lt;/code&gt;+&lt;code&gt;Enter&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Top #4创造万物：&lt;code&gt;Alt&lt;/code&gt;+&lt;code&gt;Insert&lt;/code&gt;&lt;br /&gt;
 (太难割舍，前三名并列吧！)&lt;/li&gt;
      &lt;li&gt;Top #1智能补全：&lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;Shift&lt;/code&gt;+&lt;code&gt;Space&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Top #1自我修复：&lt;code&gt;Alt&lt;/code&gt;+&lt;code&gt;Enter&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Top #1重构一切：&lt;code&gt;Command&lt;/code&gt;+&lt;code&gt;Shift&lt;/code&gt;+&lt;code&gt;Alt&lt;/code&gt;+&lt;code&gt;T&lt;/code&gt;  &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
 <entry>
   <title>Learning Django (1)</title>
   <link href="http://xia0guang.github.io/development/2015/02/24/django1"/>
   <updated>2015-02-24T00:00:00-08:00</updated>
   <id>http://xia0guang.github.io/development/2015/02/24/django1</id>
   <content type="html">
&lt;p&gt;今天算是第一次正式的开始启用这个博客了, 第一篇是关于Django学习的, 这个Django本来一直就是想学但是没有真正的决定学习, 这次正好趁着同学有需求让我做一个最简单的网站的机会, 系统的学习一下如何使用Django. 本来其实我是不太会做笔记的, 从小到大就没有写过像样的笔记, 但是我觉得人有时候就得勇于做出改变和相信自己能成功改变, 坚持做好学习笔记这个算是我2015的一个目标吧. &lt;/p&gt;

&lt;h3 id=&quot;django-&quot;&gt;Django 的安装&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;$ pip install django&lt;/code&gt;&lt;br /&gt;
 但是我要提到的是&lt;a href=&quot;https://virtualenv.pypa.io&quot;&gt;&lt;code&gt;virtualenv&lt;/code&gt;&lt;/a&gt;工具的使用, 这是一个创造isolated environment的工具, 可以为不同的virtual environment 安装不同版本的python, 不同的framework, 互不干扰, 很适合做学习开发使用.  以下是重要的virtualenv command: &lt;br /&gt;
 1. &lt;code&gt;$ virtualenv venv&lt;/code&gt;: 在当前directory下创建virtual environment;  &lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;$ virtualenv -p /usr/bin/python2.7 venv&lt;/code&gt;: 设置python版本, 其中路径为所需版本python所在目录. (备注: Mac下面python3.4路径为/Library/Frameworks/Python.framework/Versions/3.4/bin/python3.4).  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;$ source venv/bin/activate&lt;/code&gt;:激活virtual environment. 此时terminal应该显示前缀&lt;code&gt;(venv)Your-Computer:your_project UserName$ &lt;/code&gt;.    &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;$ deactivate&lt;/code&gt;:注销virtual environment.  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;$ pip freeze &amp;gt; requirements.txt&lt;/code&gt; 和 &lt;code&gt;pip install -r requirements.txt&lt;/code&gt;: 分别为保存当前环境参数 和 load所需环境. &lt;br /&gt;
  &lt;!--more--&gt; 
###Start Project&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;settings&quot;&gt;settings&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;TEMPLATES_DIRS&lt;/li&gt;
      &lt;li&gt;STATICFILES_FIRS&lt;/li&gt;
      &lt;li&gt;INSTALLED_APPS&lt;/li&gt;
      &lt;li&gt;DATEBASE: 默认Sqlite3&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;urlspy&quot;&gt;urls.py&lt;/h3&gt;
    &lt;p&gt;Project_Name文件夹下面的是根目录的url, e.g. www.example.com/***, 以及所有Apps的url, e.g. 如果Project 包括App1, App2, 则 include(App1.urls) 等.
 App_Name文件夹下面的是对应App的下的url
 url 的 Hierarchy是根据文件夹的Hierarchy来的.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;viewspy&quot;&gt;views.py&lt;/h3&gt;
    &lt;p&gt;定义相应request的response, render 不同的templates, templates都存在Project文件夹下的templates文件夹, 并在settings下设置好参数.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;modelpy&quot;&gt;model.py&lt;/h3&gt;
    &lt;p&gt;剩下的以后再加深… &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;static-files&quot;&gt;static Files&lt;/h3&gt;
    &lt;p&gt;static files 需要在Project文件夹下建立static文件夹, 并在settings下设置好参数, 但是建议一般都选择重新建立一个app或者服务器来专门存static files.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
 <entry>
   <title>Basic MarkDown Syntax for Jekyll</title>
   <link href="http://xia0guang.github.io/instruction/2015/02/04/first-post"/>
   <updated>2015-02-04T00:00:00-08:00</updated>
   <id>http://xia0guang.github.io/instruction/2015/02/04/first-post</id>
   <content type="html">
&lt;h6 id=&quot;this-is-repost-from-kramdown-syntax-documentationhttpkramdowngettalongorgsyntaxhtmlline-wrapping&quot;&gt;this is repost from &lt;a href=&quot;http://kramdown.gettalong.org/syntax.html#line-wrapping&quot;&gt;kramdown syntax documentation&lt;/a&gt;&lt;/h6&gt;

&lt;h4 id=&quot;paragraphs&quot;&gt;Paragraphs&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;On July 2, an alien mothership entered Earth&#39;s orbit and deployed several dozen saucer-shaped &quot;destroyer&quot; spacecraft, each 15 miles (24 km) wide.
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;headings&quot;&gt;Headings&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;# The largest heading (an &amp;lt;h1&amp;gt; tag)   
## The second largest heading (an &amp;lt;h2&amp;gt; tag)  
###### The 6th largest heading (an &amp;lt;h6&amp;gt; tag)  
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;blockquotes&quot;&gt;Blockquotes&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;In the words of Abraham Lincoln: 
&amp;gt;&amp;gt; Pardon my french
&lt;/code&gt;&lt;/pre&gt;

&lt;!--more--&gt;

&lt;h4 id=&quot;styling-text&quot;&gt;Styling text&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Bold&lt;/strong&gt;: &lt;code&gt;**&lt;/code&gt; or &lt;code&gt;__&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Italic&lt;/em&gt;: * or _&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;lists&quot;&gt;Lists&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;1. ordered list  
  1. Item 1
2. unordered list  
  * Item 1
  - Item 2
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;code-formatting&quot;&gt;Code formatting&lt;/h4&gt;
&lt;p&gt;inline: ` `&lt;br /&gt;
multiple lines: \~~~&lt;/p&gt;

&lt;h4 id=&quot;code-highlight&quot;&gt;Code Highlight&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;{ % highlight python %}
{ % endhighlight %}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;display as:  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;  
    &lt;span class=&quot;n&quot;&gt;retrun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;links&quot;&gt;Links&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;[Display Text](Links)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;tables&quot;&gt;Tables&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;|First Header  | Second Header 
------------- | ------------- 
|Content Cell  | Content Cell 
|Content Cell  | Content Cell|	 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;display as: &lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;First Header&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Second Header&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Content Cell&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Content Cell&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Content Cell&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Content Cell&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

</content>
 </entry>
 
 
</feed>
